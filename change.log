import tkinter as tk
from tkinter import ttk, messagebox


class Panier:
    def __init__(self):
        self.items = {}  # Use a dictionary to store items and their quantities
        self.total_price = 0


    def add_item(self, item, client, price):
        if item in self.items:
            # Increment quantity if item already exists in the cart
            self.items[item]["quantity"] += 1
        else:
            # Add new item to the cart
            self.items[item] = {"client": client, "price": price, "quantity": 1}
        print(item, client, price)

    def remove_item(self, item):
        if item in self.items:
            # Decrement quantity by one if item exists in the cart
            self.items[item]["quantity"] -= 1
            # Remove the item if its quantity becomes zero
            if self.items[item]["quantity"] == 0:
                del self.items[item]

    def view_cart(self, parent_frame, back_callback):
        # Clear previous cart content
        for widget in parent_frame.winfo_children():
            widget.destroy()

        cart_label = ttk.Label(parent_frame, text=f"Items in the cart: {len(self.items)}")
        cart_label.pack(padx=30, pady=10)

        display_client_name = tk.Label(parent_frame, text="")

        cart_tree = ttk.Treeview(parent_frame, columns=("Item", "Client", "Price", "Quantity"), show="headings")
        cart_tree.heading("Item", text="Item")
        cart_tree.heading("Client", text="Client")
        cart_tree.heading("Price", text="Price $")
        cart_tree.heading("Quantity", text="Quantity")

        for item, details in self.items.items():
            cart_tree.insert("", "end", values=(item, details["client"], details["price"], details["quantity"]))
            display_client_name.config(text=f"Card for: {details['client']}")

        cart_tree.pack(padx=10, pady=10)

        # Calculate total price
        total_price = sum(details["price"] * details["quantity"] for details in self.items.values())

        display_price = tk.Label(parent_frame, text=f"Total Price: {total_price}")
        display_price.pack()

        def remove_item():
            # Get selected item from treeview
            selected_item = cart_tree.selection()
            if not selected_item:
                return  # No item selected, do nothing

            # Get item name from selected row
            item_name = cart_tree.item(selected_item)["values"][0]

            # Remove the item from the items list
            self.remove_item(item_name)

            # Refresh the cart view
            self.view_cart(parent_frame, back_callback)

        delete_button = ttk.Button(parent_frame, text="Supprimer du panier", command=remove_item)
        delete_button.pack()

        # Add invoice generation button
        generate_invoice_button = ttk.Button(parent_frame, text="Generate Invoice",
                                             command=lambda: self.generate_invoice(parent_frame, back_callback))
        generate_invoice_button.pack()

        # Add back button
        back_button = ttk.Button(parent_frame, text="Back to Form", command=back_callback)
        back_button.pack()

    def generate_invoice(self, parent_frame, back_callback):
        if not self.items:
            messagebox.showinfo("Invoice", "No items in the cart.")
            return

        # Get the selected client name
        client_name = next(iter(self.items.values()))["client"]

        # Calculate total price
        total_price = sum(details["price"] * details["quantity"] for details in self.items.values())

        # Display invoice
        invoice_message = f"Invoice for Client: {client_name}\nTotal Price: {total_price}"
        messagebox.showinfo("Invoice", invoice_message)

        # Push the information to the database and update item quantities
        for item, details in self.items.items():
            # self.push_to_database(client_name, item, details["quantity"])
            pass

        # Clear the cart
        self.items.clear()

        # Enable client selection
        parent_frame.master.display_sales_form()  # Assuming display_sales_form is a method of FormulaireVente

        # Go back to the FormulaireVente window
        back_callback()


        # def push_to_database(self, client_name, item, quantity):
        #     # Connect to your database
        #     # connection = get_database_connection()  # Implement this function to establish a database connection
        #     connection = []  # Implement this function to establish a database connection
        #
        #     # Create a cursor object
        #     cursor = connection.cursor()
        #
        #     # Define the SQL query to update the item quantity
        #     update_query = "UPDATE items SET quantity = quantity - ? WHERE name = ?"
        #
        #     # Execute the SQL query to update the item quantity
        #     cursor.execute(update_query, (quantity, item))
        #
        #     # Define the SQL query to insert the invoice information
        #     insert_query = "INSERT INTO invoices (client_name, item, quantity) VALUES (?, ?, ?)"
        #
        #     # Execute the SQL query with the invoice information
        #     cursor.execute(insert_query, (client_name, item, quantity))
        #
        #     # Commit the transaction
        #     connection.commit()
        #
        #     # Close the cursor and connection
        #     cursor.close()
        #     connection.close()


class FormulaireVente(tk.Tk):
    def __init__(self, items_inventaire, liste_client, panier):
        super().__init__()
        self.title("Formulaire de Vente")
        self.panier = panier
        self.items_inventaire = items_inventaire
        self.liste_client = liste_client

        self.current_frame = None  # Track current frame
        self.selected_client = ""  # Initialize selected_client as an empty string

        self.display_sales_form()

    def display_sales_form(self):
        # Clear previous frame
        if self.current_frame:
            self.current_frame.destroy()

        # Frame for sales form
        self.current_frame = ttk.Frame(self)
        self.current_frame.pack()

        # DropDown pour selectionner le client
        self.client_label = ttk.Label(self.current_frame, text="Sélectionnez un client:")
        self.client_label.pack(padx=10, pady=5)

        self.selected_client_var = tk.StringVar()
        self.selected_client_combobox = ttk.Combobox(self.current_frame, textvariable=self.selected_client_var,
                                                     width=50)
        self.selected_client_combobox['values'] = self.liste_client

        if self.selected_client:
            self.selected_client_combobox.set(self.selected_client)  # Set selected client
            self.selected_client_combobox.config(state="disabled")  # Disable combobox
        self.selected_client_combobox.pack(padx=10, pady=5)

        # Dropdown pour sélectionner l'item
        self.item_label = ttk.Label(self.current_frame, text="Sélectionnez l'item:")
        self.item_label.pack(padx=10, pady=5)

        # Create a dictionary to store item prices
        self.item_prices = {item[0]: item[1] for item in self.items_inventaire}

        # Create a label to display the selected item's price
        self.price_label = ttk.Label(self.current_frame, text="")
        self.price_label.pack(padx=10, pady=5)

        # searchbar
        def check_input(event):
            validate_fields()

        self.search_bar = ttk.Combobox(self.current_frame, width=50)
        self.search_bar['values'] = [item[0] for item in self.items_inventaire]
        self.search_bar.bind('<<ComboboxSelected>>', self.display_item_price)
        self.search_bar.bind('<KeyRelease>', check_input)
        self.search_bar.pack()

        # bouton pour ajouter dans le panier
        self.add_cart = tk.Button(self.current_frame, text='Ajouter au panier', command=self.valited_sell)
        self.add_cart.pack()

        # Bouton pour soumettre la vente
        self.btn_buy = ttk.Button(self.current_frame, text="voir le panier", command=self.display_cart)
        self.btn_buy.pack(padx=10, pady=20)

        # Disable "Ajouter au panier" button initially if client is selected
        if self.selected_client:
            self.add_cart.config(state="disabled")

        # Validate fields for client and item
        def validate_fields(event=None):
            client = self.selected_client_var.get()
            item = self.search_bar.get()
            if client and item:
                self.add_cart.config(state="normal")
            else:
                self.add_cart.config(state="disabled")

        # Bind event handlers to validate fields
        self.selected_client_combobox.bind("<<ComboboxSelected>>", self.disable_client_selection)
        self.search_bar.bind("<<ComboboxSelected>>", validate_fields)
        self.selected_client_combobox.bind("<KeyRelease>", validate_fields)
        self.search_bar.bind("<KeyRelease>", validate_fields)

        # self.selected_client_combobox.bind("<KeyRelease>", validate_fields)
        # self.search_bar.bind("<KeyRelease>", validate_fields)

        # Set initial value for selected client if exists
        if self.selected_client:
            self.selected_client_combobox.set(self.selected_client)

    def disable_client_selection(self, event=None):
        self.selected_client = self.selected_client_var.get()  # Store selected client
        self.selected_client_combobox.config(state="disabled")

    def enable_client_selection(self):
        self.selected_client_combobox.config(state="normal")

    def display_item_price(self, event=None):
        selected_item = self.search_bar.get()
        if selected_item in self.item_prices:
            price = self.item_prices[selected_item]
            self.price_label.config(text=f"Prix: {price} $")
        else:
            self.price_label.config(text="")  # Clear the price label if item not found

    def valited_sell(self):
        item = self.search_bar.get()
        client = self.selected_client_var.get()
        price = self.item_prices.get(item, 0)  # Get price from dictionary or default to 0
        # Traiter la vente ici
        print(f"Vente de l'item: {item}")
        print(f"item vendu a : {client}")
        print(f"prix : {price}")
        self.panier.add_item(item, client, price)

    def display_cart(self):
        self.current_frame.destroy()  # Destroy current frame
        self.current_frame = ttk.Frame(self)
        self.current_frame.pack()
        self.panier.view_cart(self.current_frame, self.display_sales_form)

    # def fetch_from_database(item):
    #     # Connect to your database
    #     connection = get_database_connection()  # Implement this function to establish a database connection
    #
    #     # Create a cursor object
    #     cursor = connection.cursor()
    #
    #     # Define the SQL query to select the item details
    #     select_query = "SELECT price, quantity FROM items WHERE name = ?"
    #
    #     # Execute the SQL query to select the item details
    #     cursor.execute(select_query, (item,))
    #
    #     # Fetch the selected item details
    #     item_details = cursor.fetchone()
    #     if item_details:
    #         price = item_details[0]  # Assuming price is the first column in the result
    #         quantity = item_details[1]  # Assuming quantity is the second column in the result
    #     else:
    #         price = 0  # Default price if item not found in database
    #         quantity = 0  # Default quantity if item not found in database
    #
    #     # Close the cursor and connection
    #     cursor.close()
    #     connection.close()
    #
    #     return price, quantity
    #
    # def fetch_clients_from_database():
    #     # Connect to your database
    #     connection = get_database_connection()  # Implement this function to establish a database connection
    #
    #     # Create a cursor object
    #     cursor = connection.cursor()
    #
    #     # Define the SQL query to select the list of clients
    #     select_query = "SELECT client_name FROM clients"
    #
    #     # Execute the SQL query to select the list of clients
    #     cursor.execute(select_query)
    #
    #     # Fetch the list of clients
    #     clients = [row[0] for row in cursor.fetchall()]
    #
    #     # Close the cursor and connection
    #     cursor.close()
    #     connection.close()
    #
    #     return clients


# # Simuler les items d'inventaire #TODO appel a la bd
# items_inventaire = []
#
# # Fetch item details from the database for each item in items_inventaire
# for item_name, _, _ in items_inventaire:
#     # price, quantity = fetch_from_database(item_name)  # Call the fetch_from_database function
#     items_inventaire.append((item_name, price, quantity))
#
# # Display the fetched items
# print("Items from database:")
# for item in items_inventaire:
#     print(item)
#
# selected_client = fetch_clients_from_database()

items_inventaire = [("btem 1", 10), ("ctem 2", 20), ("Item 3", 30), ("tourlou", 40)]
selected_client = ["Client 1", "Client2", "client3"]

panier = Panier()

app = FormulaireVente(items_inventaire, selected_client, panier)
app.mainloop()
